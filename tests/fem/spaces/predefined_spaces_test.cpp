//
// Created by Liogky Alexey on 21.02.2023.
//

#include <gtest/gtest.h>
#include "anifem++/fem/operations/operations.h"
#include "anifem++/fem/operators.h"
#include "anifem++/fem/spaces/spaces.h"
#include <chrono>

TEST(AniInterface, TemplatedFemSpacesApplyTest){
    using namespace Ani;
    const long q = 4;
    double XYL[4*q] = {
        0.585410196624968, 0.138196601125011, 0.138196601125011, 0.138196601125011, 
        0.138196601125011, 0.585410196624968, 0.138196601125011, 0.138196601125011, 
        0.138196601125011, 0.138196601125011, 0.585410196624968, 0.138196601125011, 
        0.138196601125011, 0.138196601125011, 0.138196601125011, 0.585410196624968
        };
    double W[q] = {0.25, 0.25, 0.25, 0.25};    
    const int fusion = 2;
    double XYZ[3*fusion*4] = {
        1, 1, 1, 10, 11, 12, //XY0[0], XY0[1]
        2, 1, 1, 11, 13, 15, //XY1[0], XY1[1]
        1, 2, 1, 14, 16, 18, //XY2[0], XY2[1]
        1, 1, 2, 17, 19, 13, //XY3[0], XY3[1]
    };
    double XYP[3*4*fusion];
    double PSI[3*3*fusion];
    double DET[fusion], MES[fusion];
    for (int r = 0; r < fusion; ++r) {
        for (int l = 0; l < 4; ++l)
            for (int k = 0; k < 3; ++k)
                XYP[3*4*r + k + l*3] = XYZ[3*r + 3*fusion*l + k] - XYZ[3*r + 3*fusion*0 + k];
        DET[r] = inverse3x3(XYP + 3*4*r + 3, PSI + 3*3*r);
        MES[r] = abs(DET[r]) / 6;
    }

    std::vector<double> Ud;
    std::vector<double> extraR;
    std::vector<int> extraI;
    AniMemory<double, int> mem;
    mem.XYP.Init(XYP, 3*4*fusion);
    mem.PSI.Init(PSI, 3*3*fusion);
    mem.DET.Init(DET, fusion);
    mem.MES.Init(MES, fusion);
    mem.XYL.Init(XYL, 4*q);
    mem.WG.Init(W, q);
    mem.q = q;
    mem.f = fusion;

    #define SETOP(OP, FEM_TYPE)\
        DenseMatrix<double> U_a(U_exp, dim_exp*q, nfa_exp*fusion);\
        Operator<OP, FemFix<FEM_TYPE>> op1;\
        std::size_t Usz, extraRsz, extraIsz;\
        op1.memoryRequirements<double, int>(fusion, q, Usz, extraRsz, extraIsz);\
        Ud.resize(Usz), extraR.resize(extraRsz), extraI.resize(extraIsz);\
        mem.U.Init(Ud.data(), Usz), mem.extraR.Init(extraR.data(), extraRsz), mem.extraI.Init(extraI.data(), extraIsz);\
        DenseMatrix<double> U_e = op1.apply(mem, mem.U);\
        std::string error_msg = std::string("Operator ") + #OP +"("+ #FEM_TYPE + ")" + " failure";\
        EXPECT_NEAR(U_e.ScalNorm(1, U_e, -1, U_a), 0, 100*(1 + U_a.ScalNorm(1, U_a))*DBL_EPSILON) << error_msg
    {
        const long nfa_exp = 1, dim_exp = 1;
        double Ut[] = {1, 1, 1, 1};
        double U_exp[dim_exp*q * nfa_exp*fusion];
        for (int r = 0; r < fusion; ++r)
            std::copy(Ut, Ut + dim_exp*q*nfa_exp, U_exp + r*dim_exp*q*nfa_exp);
        SETOP(IDEN, FEM_P0);
    } 
    {
        double Ut[] = {
            5.854101966249684e-01, 1.381966011250105e-01, 1.381966011250105e-01, 1.381966011250105e-01, 
            1.381966011250105e-01, 5.854101966249684e-01, 1.381966011250105e-01, 1.381966011250105e-01, 
            1.381966011250105e-01, 1.381966011250105e-01, 5.854101966249684e-01, 1.381966011250105e-01, 
            1.381966011250106e-01, 1.381966011250106e-01, 1.381966011250105e-01, 5.854101966249684e-01
        };
        const long nfa_exp = 4, dim_exp = 1;
        double U_exp[dim_exp*q * nfa_exp*fusion];
        for (int r = 0; r < fusion; ++r)
            std::copy(Ut, Ut + dim_exp*q*nfa_exp, U_exp + r*dim_exp*q*nfa_exp);
        SETOP(IDEN, FEM_P1);
    }
    {
        double Ut[] = {
            1.000000000000000e-01, -1.000000000000000e-01, -1.000000000000000e-01, -1.000000000000000e-01, 
            -1.000000000000000e-01, 1.000000000000000e-01, -1.000000000000000e-01, -1.000000000000000e-01, 
            -1.000000000000000e-01, -1.000000000000000e-01, 1.000000000000000e-01, -1.000000000000000e-01, 
            -1.000000000000000e-01, -1.000000000000000e-01, -1.000000000000000e-01, 1.000000000000000e-01, 
            3.236067977499789e-01, 3.236067977499789e-01, 7.639320225002103e-02, 7.639320225002103e-02, 
            3.236067977499789e-01, 7.639320225002103e-02, 3.236067977499789e-01, 7.639320225002103e-02, 
            3.236067977499790e-01, 7.639320225002105e-02, 7.639320225002104e-02, 3.236067977499789e-01, 
            7.639320225002103e-02, 3.236067977499789e-01, 3.236067977499789e-01, 7.639320225002103e-02, 
            7.639320225002105e-02, 3.236067977499790e-01, 7.639320225002104e-02, 3.236067977499789e-01, 
            7.639320225002105e-02, 7.639320225002105e-02, 3.236067977499790e-01, 3.236067977499789e-01
        };
        const long nfa_exp = 10, dim_exp = 1;
        double U_exp[dim_exp*q * nfa_exp*fusion];
        for (int r = 0; r < fusion; ++r)
            std::copy(Ut, Ut + dim_exp*q*nfa_exp, U_exp + r*dim_exp*q*nfa_exp);
        SETOP(IDEN, FEM_P2);
    }
    {
        double Ut[] = {
            -5.395898033750331e-02, 6.413118960624632e-02, 6.413118960624632e-02, 6.413118960624632e-02, 
            6.413118960624632e-02, -5.395898033750331e-02, 6.413118960624632e-02, 6.413118960624632e-02, 
            6.413118960624632e-02, 6.413118960624632e-02, -5.395898033750331e-02, 6.413118960624632e-02, 
            6.413118960624632e-02, 6.413118960624632e-02, 6.413118960624632e-02, -5.395898033750331e-02, 
            2.753115294937455e-01, -2.131230589874906e-01, -5.031152949374550e-02, -5.031152949374550e-02, 
            -2.131230589874906e-01, 2.753115294937455e-01, -5.031152949374550e-02, -5.031152949374550e-02, 
            2.753115294937455e-01, -5.031152949374550e-02, -2.131230589874906e-01, -5.031152949374550e-02, 
            -2.131230589874906e-01, -5.031152949374550e-02, 2.753115294937455e-01, -5.031152949374550e-02, 
            2.753115294937455e-01, -5.031152949374550e-02, -5.031152949374550e-02, -2.131230589874906e-01, 
            -2.131230589874906e-01, -5.031152949374550e-02, -5.031152949374550e-02, 2.753115294937455e-01, 
            -5.031152949374550e-02, 2.753115294937455e-01, -2.131230589874906e-01, -5.031152949374550e-02, 
            -5.031152949374550e-02, -2.131230589874906e-01, 2.753115294937455e-01, -5.031152949374550e-02, 
            -5.031152949374550e-02, 2.753115294937455e-01, -5.031152949374550e-02, -2.131230589874906e-01, 
            -5.031152949374550e-02, -2.131230589874906e-01, -5.031152949374550e-02, 2.753115294937455e-01, 
            -5.031152949374550e-02, -5.031152949374550e-02, 2.753115294937455e-01, -2.131230589874906e-01, 
            -5.031152949374550e-02, -5.031152949374550e-02, -2.131230589874906e-01, 2.753115294937455e-01, 
            3.018691769624735e-01, 3.018691769624735e-01, 3.018691769624735e-01, 7.126164607505754e-02, 
            7.126164607505754e-02, 3.018691769624735e-01, 3.018691769624735e-01, 3.018691769624735e-01, 
            3.018691769624735e-01, 7.126164607505754e-02, 3.018691769624735e-01, 3.018691769624735e-01, 
            3.018691769624735e-01, 3.018691769624735e-01, 7.126164607505754e-02, 3.018691769624735e-01, 
        };
        const long nfa_exp = 20, dim_exp = 1;
        double U_exp[dim_exp*q * nfa_exp*fusion];
        for (int r = 0; r < fusion; ++r)
            std::copy(Ut, Ut + dim_exp*q*nfa_exp, U_exp + r*dim_exp*q*nfa_exp);
        SETOP(IDEN, FEM_P3);
    }
    {
        double Ut[] = {
            5.854101966249683e-01, 5.854101966249683e-01, 5.854101966249684e-01, -7.562305898749053e-01, 
            -7.562305898749053e-01, 5.854101966249685e-01, 5.854101966249685e-01, 5.854101966249685e-01, 
            5.854101966249685e-01, -7.562305898749053e-01, 5.854101966249685e-01, 5.854101966249685e-01, 
            5.854101966249685e-01, 5.854101966249685e-01, -7.562305898749053e-01, 5.854101966249685e-01,
        };
        const long nfa_exp = 4, dim_exp = 1;
        double U_exp[dim_exp*q * nfa_exp*fusion];
        for (int r = 0; r < fusion; ++r)
            std::copy(Ut, Ut + dim_exp*q*nfa_exp, U_exp + r*dim_exp*q*nfa_exp);
        SETOP(IDEN, FEM_CR1); 
    }
    {
        double U_exp[] = {
            1.381966011250105e-01, 1.381966011250105e-01, -8.618033988749895e-01, 5.854101966249684e-01, 1.381966011250105e-01, -8.618033988749895e-01, 
              1.381966011250105e-01, 5.854101966249684e-01, -8.618033988749894e-01, 1.381966011250105e-01, 1.381966011250105e-01, -4.145898033750315e-01, 
            2.393635345818484e-01, 2.393635345818484e-01, 2.393635345818485e-01, 1.013960203823332e+00, 2.393635345818484e-01, 2.393635345818485e-01, 
              2.393635345818484e-01, 1.013960203823332e+00, 2.393635345818485e-01, 2.393635345818484e-01, 2.393635345818484e-01, 1.013960203823332e+00,
            -8.618033988749895e-01, 1.381966011250105e-01, 1.381966011250106e-01, -4.145898033750316e-01, 1.381966011250105e-01, 1.381966011250106e-01, 
              -8.618033988749895e-01, 5.854101966249684e-01, 1.381966011250105e-01, -8.618033988749894e-01, 1.381966011250105e-01, 5.854101966249684e-01, 
            1.381966011250105e-01, -8.618033988749895e-01, 1.381966011250106e-01, 5.854101966249684e-01, -8.618033988749895e-01, 1.381966011250106e-01, 
              1.381966011250105e-01, -4.145898033750315e-01, 1.381966011250105e-01, 1.381966011250105e-01, -8.618033988749894e-01, 5.854101966249684e-01, 
            
            -1.635536789520464e+00, -1.814781323514657e+00, 1.169527283311171e-01, -1.498606150144172e+00, -1.540920044762074e+00, 5.277446464599918e-01, 
              -1.087814232015297e+00, -1.130128126633199e+00, 9.385365645888661e-01, -6.770223138864228e-01, -7.193362085043243e-01, 2.538833677074086e-01, 
            2.345274091018258e+00, 2.931592613772822e+00, 1.954395075848548e+00, 2.977729623051933e+00, 4.196503677840173e+00, 3.851761671949575e+00, 
              4.875096219152961e+00, 6.093870273941199e+00, 5.749128268050603e+00, 6.772462815253988e+00, 7.991236870042227e+00, 2.586850607882223e+00, 
            1.576304845238050e+00, 1.746613192277317e-01, -3.874047425670025e+00, 2.647065218887438e+00, 2.316182066526508e+00, -6.617663047218595e-01, 
              5.859346339835604e+00, 5.528463187474673e+00, 2.550514816226306e+00, 9.071627460783766e+00, 8.740744308422837e+00, -2.803287052020636e+00, 
            -2.959395069789908e+00, -3.699243837237385e+00, -5.836329422181168e+00, -2.394200904529470e+00, -2.568855506716508e+00, -4.140746926399851e+00, 
              -6.986184087481525e-01, -8.732730109351907e-01, -2.445164430618535e+00, 9.969640870331643e-01, 8.223094848461261e-01, -5.271135256920729e+00
        };
        const long nfa_exp = 4, dim_exp = 3;
        SETOP(IDEN, FEM_RT0);
    }
    {
        double U_exp[] = {
            7.236067977499789e-01, 1.381966011250105e-01, 1.381966011250105e-01, 7.236067977499789e-01, 5.854101966249684e-01, 5.854101966249684e-01, 
              2.763932022500210e-01, 1.381966011250105e-01, 1.381966011250105e-01, 2.763932022500210e-01, 1.381966011250105e-01, 1.381966011250105e-01, 
            1.381966011250105e-01, 7.236067977499789e-01, 1.381966011250105e-01, 1.381966011250105e-01, 2.763932022500210e-01, 1.381966011250105e-01,
              5.854101966249684e-01, 7.236067977499789e-01, 5.854101966249684e-01, 1.381966011250105e-01, 2.763932022500210e-01, 1.381966011250105e-01, 
            1.381966011250106e-01, 1.381966011250106e-01, 7.236067977499789e-01, 1.381966011250106e-01, 1.381966011250106e-01, 2.763932022500211e-01,
              1.381966011250105e-01, 1.381966011250105e-01, 2.763932022500211e-01, 5.854101966249684e-01, 5.854101966249684e-01, 7.236067977499789e-01,
            -1.954395075848548e-01, 1.954395075848548e-01, 0.000000000000000e+00, -1.954395075848548e-01, 8.278950396185306e-01, 0.000000000000000e+00, 
              -8.278950396185306e-01, 1.954395075848548e-01, 0.000000000000000e+00, -1.954395075848548e-01, 1.954395075848548e-01, 0.000000000000000e+00,
            -1.954395075848549e-01, 0.000000000000000e+00, 1.954395075848548e-01, -1.954395075848549e-01, 0.000000000000000e+00, 8.278950396185306e-01, 
              -1.954395075848548e-01, 0.000000000000000e+00, 1.954395075848548e-01, -8.278950396185306e-01, 0.000000000000000e+00, 1.954395075848548e-01, 
            0.000000000000000e+00, -1.954395075848549e-01, 1.954395075848548e-01, 0.000000000000000e+00, -1.954395075848549e-01, 1.954395075848548e-01, 
              0.000000000000000e+00, -1.954395075848548e-01, 8.278950396185306e-01, 0.000000000000000e+00, -8.278950396185306e-01, 1.954395075848548e-01, 
              
            -4.441558859229270e+00, 3.985224612042895e+00, -2.738005483118248e-01, -3.116847150550317e+00, 3.009121247753141e+00, -6.463554167830593e-02, 
              -1.443527097482166e+00, 1.335801194684989e+00, -6.463554167830593e-02, -1.443527097482166e+00, 1.335801194684989e+00, -6.463554167830593e-02, 
            3.496203905119690e+00, -3.068124436169664e+00, 1.284238406850079e+00, -1.010558544442167e-01, 2.021117088884334e-01, 3.031675633326503e-01, 
              -4.025339228513934e+00, 4.126395082958150e+00, 3.031675633326503e-01, -1.010558544442167e-01, 2.021117088884334e-01, 3.031675633326503e-01, 
            -2.256844734239224e+00, 3.038153544101952e+00, -7.813088098627280e-01, -1.659977914923558e+00, 1.844419905470620e+00, -1.844419905470619e-01, 
              -1.659977914923558e+00, 1.844419905470619e+00, -1.844419905470619e-01, -6.434912469448887e+00, 6.619354459995948e+00, -1.844419905470619e-01, 
            1.944828718477519e+00, -1.735385625718402e+00, 2.692839764045795e-01, 4.074969558891598e+00, -3.671877298822110e+00, 8.502314783356921e-01,
              6.108285815650492e+00, -5.414719804615447e+00, 5.597577273701358e-01, 1.944828718477519e+00, -1.735385625718402e+00, 2.692839764045795e-01, 
            2.007950062149068e+00, -1.606360049719255e+00, 0.000000000000000e+00, 1.520610344908620e+00, -6.316806152383582e-01, -4.873397172404482e-01, 
              2.007950062149068e+00, -1.606360049719254e+00, 0.000000000000000e+00, 8.993152675928826e+00, -7.779329801431598e+00, 4.873397172404483e-01, 
            -9.439747043174389e-01, 9.817336924901364e-01, -3.398308935542780e-01, -9.439747043174389e-01, 9.817336924901364e-01, -3.398308935542780e-01, 
              -1.310546661782818e+00, 1.714877607420895e+00, -7.064028510196574e-01, -3.632169059063554e+00, 3.425546742259332e+00, -1.072974808485037e+00
        };
        const long nfa_exp = 6, dim_exp = 3;
        SETOP(IDEN, FEM_ND0);
    }
    {
      const long nfa_exp = 1, dim_exp = 1;
      double v = 256*XYL[0]*XYL[1]*XYL[2]*XYL[3];
      double U_exp[dim_exp*q * nfa_exp*fusion] = {
          v, v, v, v, v, v, v, v
      };
      SETOP(IDEN, FEM_B4);
    }
    {
        const long nfa_exp = 1, dim_exp = 1*3;
        double U_exp[dim_exp*q * nfa_exp*fusion];
        std::fill(U_exp, U_exp + dim_exp*q * nfa_exp*fusion, 0.0);
        SETOP(GRAD, FEM_P0);
    }
    {
        double U_exp[] = {
            -1.000000000000000e+00, -1.000000000000000e+00, -1.000000000000000e+00, -1.000000000000000e+00, -1.000000000000000e+00, -1.000000000000000e+00, 
              -1.000000000000000e+00, -1.000000000000000e+00, -1.000000000000000e+00, -1.000000000000000e+00, -1.000000000000000e+00, -1.000000000000000e+00, 
            1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 
              1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00, 
              0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00, 
              0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00, 
            
            9.999999999999999e-01, -1.000000000000000e+00, 0.000000000000000e+00, 9.999999999999999e-01, -1.000000000000000e+00, 0.000000000000000e+00,
              9.999999999999999e-01, -1.000000000000000e+00, 0.000000000000000e+00, 9.999999999999999e-01, -1.000000000000000e+00, 0.000000000000000e+00, 
            -1.791666666666667e+00, 1.583333333333333e+00, -1.250000000000000e-01, -1.791666666666667e+00, 1.583333333333333e+00, -1.250000000000000e-01, 
              -1.791666666666667e+00, 1.583333333333333e+00, -1.250000000000000e-01, -1.791666666666667e+00, 1.583333333333333e+00, -1.250000000000000e-01, 
            9.166666666666666e-01, -8.333333333333333e-01, 2.500000000000000e-01, 9.166666666666666e-01, -8.333333333333333e-01, 2.500000000000000e-01, 
              9.166666666666666e-01, -8.333333333333333e-01, 2.500000000000000e-01, 9.166666666666666e-01, -8.333333333333333e-01, 2.500000000000000e-01, 
            -1.250000000000000e-01, 2.500000000000000e-01, -1.250000000000000e-01, -1.250000000000000e-01, 2.500000000000000e-01, -1.250000000000000e-01, 
              -1.250000000000000e-01, 2.500000000000000e-01, -1.250000000000000e-01, -1.250000000000000e-01, 2.500000000000000e-01, -1.250000000000000e-01
        };
        const long nfa_exp = 4, dim_exp = 1*3;
        SETOP(GRAD, FEM_P1);
    }
    {
        double U_exp[] = {
            -1.341640786499874e+00, -1.341640786499874e+00, -1.341640786499874e+00, 4.472135954999580e-01, 4.472135954999580e-01, 4.472135954999580e-01, 
              4.472135954999580e-01, 4.472135954999580e-01, 4.472135954999580e-01, 4.472135954999580e-01, 4.472135954999580e-01, 4.472135954999580e-01, 
            -4.472135954999580e-01, 0.000000000000000e+00, 0.000000000000000e+00, 1.341640786499874e+00, 0.000000000000000e+00, 0.000000000000000e+00, 
              -4.472135954999580e-01, 0.000000000000000e+00, 0.000000000000000e+00, -4.472135954999580e-01, 0.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -4.472135954999580e-01, 0.000000000000000e+00, 0.000000000000000e+00, -4.472135954999580e-01, 0.000000000000000e+00, 
              0.000000000000000e+00, 1.341640786499874e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.472135954999580e-01, 0.000000000000000e+00, 
            0.000000000000000e+00, 0.000000000000000e+00, -4.472135954999578e-01, 0.000000000000000e+00, 0.000000000000000e+00, -4.472135954999578e-01, 
              0.000000000000000e+00, 0.000000000000000e+00, -4.472135954999579e-01, 0.000000000000000e+00, 0.000000000000000e+00, 1.341640786499874e+00, 
            1.788854381999831e+00, -5.527864045000420e-01, -5.527864045000420e-01, -1.788854381999831e+00, -2.341640786499874e+00, -2.341640786499874e+00, 
              0.000000000000000e+00, -5.527864045000420e-01, -5.527864045000420e-01, 0.000000000000000e+00, -5.527864045000420e-01, -5.527864045000420e-01, 
            -5.527864045000420e-01, 1.788854381999831e+00, -5.527864045000420e-01, -5.527864045000420e-01, 0.000000000000000e+00, -5.527864045000420e-01, 
              -2.341640786499874e+00, -1.788854381999831e+00, -2.341640786499874e+00, -5.527864045000420e-01, 0.000000000000000e+00, -5.527864045000420e-01, 
            -5.527864045000422e-01, -5.527864045000422e-01, 1.788854381999831e+00, -5.527864045000422e-01, -5.527864045000422e-01, -0.000000000000000e+00, 
              -5.527864045000421e-01, -5.527864045000421e-01, -0.000000000000000e+00, -2.341640786499874e+00, -2.341640786499874e+00, -1.788854381999831e+00, 
            5.527864045000420e-01, 5.527864045000420e-01, 0.000000000000000e+00, 5.527864045000420e-01, 2.341640786499874e+00, 0.000000000000000e+00, 
              2.341640786499874e+00, 5.527864045000420e-01, 0.000000000000000e+00, 5.527864045000420e-01, 5.527864045000420e-01, 0.000000000000000e+00, 
            5.527864045000422e-01, 0.000000000000000e+00, 5.527864045000420e-01, 5.527864045000422e-01, 0.000000000000000e+00, 2.341640786499874e+00, 
              5.527864045000421e-01, 0.000000000000000e+00, 5.527864045000420e-01, 2.341640786499874e+00, 0.000000000000000e+00, 5.527864045000420e-01, 
            0.000000000000000e+00, 5.527864045000422e-01, 5.527864045000420e-01, 0.000000000000000e+00, 5.527864045000422e-01, 5.527864045000420e-01, 
              0.000000000000000e+00, 5.527864045000421e-01, 2.341640786499874e+00, 0.000000000000000e+00, 2.341640786499874e+00, 5.527864045000420e-01, 
            
            1.341640786499874e+00, -1.341640786499874e+00, 0.000000000000000e+00, -4.472135954999579e-01, 4.472135954999580e-01, 0.000000000000000e+00, 
              -4.472135954999579e-01, 4.472135954999580e-01, 0.000000000000000e+00, -4.472135954999579e-01, 4.472135954999580e-01, 0.000000000000000e+00, 
            8.012576919374247e-01, -7.080881928749334e-01, 5.590169943749475e-02, -2.403773075812274e+00, 2.124264578624800e+00, -1.677050983124842e-01, 
              8.012576919374247e-01, -7.080881928749334e-01, 5.590169943749475e-02, 8.012576919374247e-01, -7.080881928749334e-01, 5.590169943749475e-02, 
            -4.099457958749615e-01, 3.726779962499649e-01, -1.118033988749895e-01, -4.099457958749615e-01, 3.726779962499649e-01, -1.118033988749895e-01, 
              1.229837387624884e+00, -1.118033988749895e+00, 3.354101966249684e-01, -4.099457958749615e-01, 3.726779962499649e-01, -1.118033988749895e-01, 
            5.590169943749472e-02, -1.118033988749894e-01, 5.590169943749472e-02, 5.590169943749472e-02, -1.118033988749894e-01, 5.590169943749472e-02, 
              5.590169943749473e-02, -1.118033988749895e-01, 5.590169943749473e-02, -1.677050983124842e-01, 3.354101966249684e-01, -1.677050983124842e-01, 
            -3.642653337978897e+00, 3.154811507458091e+00, -2.927050983124842e-01, 1.351231811770631e+00, -1.466395646041474e+00, -6.909830056250527e-02, 
              -4.376225702291999e-01, 3.224587359583578e-01, -6.909830056250525e-02, -4.376225702291999e-01, 3.224587359583578e-01, -6.909830056250525e-02, 
            2.699290458791593e+00, -2.504153726583270e+00, 5.854101966249683e-01, 1.059507275291747e+00, -1.013441741583410e+00, 1.381966011250105e-01, 
              2.848361657291579e+00, -2.802296123583242e+00, 1.381966011250105e-01, 1.059507275291747e+00, -1.013441741583410e+00, 1.381966011250105e-01, 
            2.600813061875580e-01, 3.262379212492617e-02, -2.927050983124842e-01, 4.836881039375369e-01, -4.145898033750318e-01, -6.909830056250525e-02, 
              4.836881039375368e-01, -4.145898033750316e-01, -6.909830056250525e-02, 2.272542485937368e+00, -2.203444185374863e+00, -6.909830056250527e-02, 
            -4.836881039375367e-01, 4.145898033750315e-01, 6.909830056250525e-02, 1.156095079562309e+00, -1.076122181624828e+00, 5.163118960624632e-01, 
              -3.688718871687235e+00, 3.246942574874765e+00, -1.545084971874737e-01, -4.836881039375367e-01, 4.145898033750315e-01, 6.909830056250525e-02, 
            -1.059507275291748e+00, 1.013441741583411e+00, -1.381966011250105e-01, -1.283114073041727e+00, 1.460655337083369e+00, -3.618033988749895e-01, 
              -1.059507275291747e+00, 1.013441741583410e+00, -1.381966011250105e-01, -4.264538043041445e+00, 3.845794513083144e+00, -3.618033988749895e-01, 
            4.376225702292001e-01, -3.224587359583579e-01, 6.909830056250531e-02, 4.376225702292001e-01, -3.224587359583579e-01, 6.909830056250531e-02, 
              2.140157724792210e-01, 1.247548595416000e-01, -1.545084971874737e-01, 2.077405753729045e+00, -1.813170720958218e+00, 5.163118960624632e-01
        };
        const long nfa_exp = 10, dim_exp = 1*3;
        SETOP(GRAD, FEM_P2);
    }
    {
        double U_exp[] = {
            -3.578270575938176e-01, -3.578270575938176e-01, -3.578270575938176e-01, -1.405764746872384e-02, -1.405764746872384e-02, -1.405764746872384e-02,
              -1.405764746872384e-02, -1.405764746872384e-02, -1.405764746872384e-02, -1.405764746872384e-02, -1.405764746872384e-02, -1.405764746872384e-02, 
            1.405764746872384e-02, 0.000000000000000e+00, 0.000000000000000e+00, 3.578270575938176e-01, 0.000000000000000e+00, 0.000000000000000e+00, 
              1.405764746872384e-02, 0.000000000000000e+00, 0.000000000000000e+00, 1.405764746872384e-02, 0.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, 1.405764746872384e-02, 0.000000000000000e+00, 0.000000000000000e+00, 1.405764746872384e-02, 0.000000000000000e+00, 
              0.000000000000000e+00, 3.578270575938176e-01, 0.000000000000000e+00, 0.000000000000000e+00, 1.405764746872384e-02, 0.000000000000000e+00, 
            0.000000000000000e+00, 0.000000000000000e+00, 1.405764746872384e-02, 0.000000000000000e+00, 0.000000000000000e+00, 1.405764746872384e-02, 
              0.000000000000000e+00, 0.000000000000000e+00, 1.405764746872384e-02, 0.000000000000000e+00, 0.000000000000000e+00, 3.578270575938176e-01, 
            4.297117626563592e-01, -1.562461179749814e+00, -1.562461179749814e+00, 8.594235253126506e-02, 4.499999999999918e-01, 4.499999999999918e-01, 
              -2.578270575938229e-01, 1.062305898749039e-01, 1.062305898749039e-01, -2.578270575938229e-01, 1.062305898749039e-01, 1.062305898749039e-01, 
            -8.594235253126506e-02, 3.640576474687267e-01, 3.640576474687267e-01, -4.297117626563592e-01, -1.992172942406174e+00, -1.992172942406174e+00, 
              2.578270575938229e-01, 3.640576474687267e-01, 3.640576474687267e-01, 2.578270575938229e-01, 3.640576474687267e-01, 3.640576474687267e-01, 
            -1.562461179749814e+00, 4.297117626563592e-01, -1.562461179749814e+00, 1.062305898749039e-01, -2.578270575938229e-01, 1.062305898749039e-01, 
              4.499999999999918e-01, 8.594235253126506e-02, 4.499999999999918e-01, 1.062305898749039e-01, -2.578270575938229e-01, 1.062305898749039e-01, 
            3.640576474687267e-01, -8.594235253126506e-02, 3.640576474687267e-01, 3.640576474687267e-01, 2.578270575938229e-01, 3.640576474687267e-01, 
              -1.992172942406174e+00, -4.297117626563592e-01, -1.992172942406174e+00, 3.640576474687267e-01, 2.578270575938229e-01, 3.640576474687267e-01, 
            -1.562461179749814e+00, -1.562461179749814e+00, 4.297117626563592e-01, 1.062305898749039e-01, 1.062305898749039e-01, -2.578270575938229e-01, 
              1.062305898749039e-01, 1.062305898749039e-01, -2.578270575938229e-01, 4.499999999999918e-01, 4.499999999999918e-01, 8.594235253126506e-02, 
            3.640576474687267e-01, 3.640576474687267e-01, -8.594235253126506e-02, 3.640576474687267e-01, 3.640576474687267e-01, 2.578270575938229e-01, 
              3.640576474687267e-01, 3.640576474687267e-01, 2.578270575938229e-01, -1.992172942406174e+00, -1.992172942406174e+00, -4.297117626563592e-01, 
            -1.062305898749039e-01, -3.640576474687267e-01, 0.000000000000000e+00, 1.562461179749814e+00, 1.992172942406174e+00, 0.000000000000000e+00, 
              -4.499999999999918e-01, -3.640576474687267e-01, 0.000000000000000e+00, -1.062305898749039e-01, -3.640576474687267e-01, 0.000000000000000e+00, 
            -3.640576474687267e-01, -1.062305898749039e-01, 0.000000000000000e+00, -3.640576474687267e-01, -4.499999999999918e-01, 0.000000000000000e+00, 
              1.992172942406174e+00, 1.562461179749814e+00, 0.000000000000000e+00, -3.640576474687267e-01, -1.062305898749039e-01, 0.000000000000000e+00, 
            -1.062305898749039e-01, 0.000000000000000e+00, -3.640576474687267e-01, 1.562461179749814e+00, 0.000000000000000e+00, 1.992172942406174e+00, 
              -1.062305898749039e-01, 0.000000000000000e+00, -3.640576474687267e-01, -4.499999999999918e-01, 0.000000000000000e+00, -3.640576474687267e-01, 
            -3.640576474687267e-01, 0.000000000000000e+00, -1.062305898749039e-01, -3.640576474687267e-01, 0.000000000000000e+00, -4.499999999999918e-01, 
              -3.640576474687267e-01, 0.000000000000000e+00, -1.062305898749039e-01, 1.992172942406174e+00, 0.000000000000000e+00, 1.562461179749814e+00, 
            0.000000000000000e+00, -1.062305898749039e-01, -3.640576474687267e-01, 0.000000000000000e+00, -1.062305898749039e-01, -3.640576474687267e-01, 
              0.000000000000000e+00, 1.562461179749814e+00, 1.992172942406174e+00, 0.000000000000000e+00, -4.499999999999918e-01, -3.640576474687267e-01, 
            0.000000000000000e+00, -3.640576474687267e-01, -1.062305898749039e-01, 0.000000000000000e+00, -3.640576474687267e-01, -1.062305898749039e-01, 
              0.000000000000000e+00, -3.640576474687267e-01, -4.499999999999918e-01, 0.000000000000000e+00, 1.992172942406174e+00, 1.562461179749814e+00, 
            1.668691769624719e+00, 1.668691769624719e+00, -5.156541151876456e-01, -1.668691769624719e+00, 0.000000000000000e+00, -2.184345884812364e+00, 
              0.000000000000000e+00, -1.668691769624719e+00, -2.184345884812364e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.156541151876456e-01, 
            5.156541151876456e-01, 5.156541151876456e-01, 5.156541151876456e-01, 5.156541151876456e-01, 2.184345884812364e+00, 2.184345884812364e+00, 
              2.184345884812364e+00, 5.156541151876456e-01, 2.184345884812364e+00, 2.184345884812364e+00, 2.184345884812364e+00, 5.156541151876456e-01, 
            -5.156541151876456e-01, 1.668691769624719e+00, 1.668691769624719e+00, -5.156541151876456e-01, 0.000000000000000e+00, 0.000000000000000e+00, 
              -2.184345884812364e+00, -1.668691769624719e+00, 0.000000000000000e+00, -2.184345884812364e+00, 0.000000000000000e+00, -1.668691769624719e+00, 
            1.668691769624719e+00, -5.156541151876456e-01, 1.668691769624719e+00, -1.668691769624719e+00, -2.184345884812364e+00, 0.000000000000000e+00, 
              0.000000000000000e+00, -5.156541151876456e-01, 0.000000000000000e+00, 0.000000000000000e+00, -2.184345884812364e+00, -1.668691769624719e+00, 
            
            3.578270575938177e-01, -3.578270575938175e-01, 0.000000000000000e+00, 1.405764746872385e-02, -1.405764746872384e-02, 0.000000000000000e+00, 
              1.405764746872385e-02, -1.405764746872384e-02, 0.000000000000000e+00, 1.405764746872385e-02, -1.405764746872384e-02, 0.000000000000000e+00, 
            -2.518661838146356e-02, 2.225794182547942e-02, -1.757205933590480e-03, -6.411068115222566e-01, 5.665595078568778e-01, -4.472838219922720e-02, 
              -2.518661838146356e-02, 2.225794182547942e-02, -1.757205933590480e-03, -2.518661838146356e-02, 2.225794182547942e-02, -1.757205933590480e-03, 
            1.288617684633019e-02, -1.171470622393654e-02, 3.514411867180961e-03, 1.288617684633019e-02, -1.171470622393654e-02, 3.514411867180961e-03, 
              3.280081361276661e-01, -2.981892146615147e-01, 8.945676439845440e-02, 1.288617684633019e-02, -1.171470622393654e-02, 3.514411867180961e-03, 
            -1.757205933590480e-03, 3.514411867180961e-03, -1.757205933590480e-03, -1.757205933590480e-03, 3.514411867180961e-03, -1.757205933590480e-03, 
              -1.757205933590480e-03, 3.514411867180961e-03, -1.757205933590480e-03, -4.472838219922720e-02, 8.945676439845440e-02, -4.472838219922720e-02, 
            -2.006848675394580e+00, 1.591812645726627e+00, -2.490216178007717e-01, 2.022699517148103e-01, -1.264246084921589e-01, 4.550720593359085e-02, 
              5.460393618398982e-01, -4.701940186172467e-01, 4.550720593359084e-02, 5.460393618398982e-01, -4.701940186172467e-01, 4.550720593359084e-02, 
            4.421923525312585e-01, -3.484423525312603e-01, 5.624999999999897e-02, -8.072366713122440e-01, 4.817239255310327e-01, -1.953076474687268e-01, 
              -1.737278406095240e-01, 1.958592135001289e-01, 1.327882373436298e-02, -1.737278406095240e-01, 1.958592135001289e-01, 1.327882373436298e-02, 
            3.388619710288807e+00, -3.222605298421625e+00, 4.980432356015435e-01, -4.399501000545701e-01, 4.096119627655095e-01, -9.101441186718168e-02, 
              -7.837195101796581e-01, 7.533813728905973e-01, -9.101441186718168e-02, -4.399501000545701e-01, 4.096119627655095e-01, -9.101441186718168e-02, 
            -7.765576474687191e-01, 7.390576474687198e-01, -1.124999999999979e-01, -4.614356881873887e-01, 4.525831390311466e-01, -2.655764746872596e-02, 
              3.424429023843504e+00, -3.294223925531020e+00, 3.906152949374536e-01, -4.614356881873887e-01, 4.525831390311466e-01, -2.655764746872596e-02, 
            1.313439561949043e+00, -1.064417944148271e+00, -2.490216178007717e-01, -6.072338394131306e-02, 1.521617800772219e-02, 4.550720593359084e-02, 
              -6.072338394131306e-02, 1.521617800772219e-02, 4.550720593359084e-02, -4.044927940664010e-01, 3.589855881328100e-01, 4.550720593359084e-02, 
            -3.078076474687278e-01, 2.515576474687287e-01, 5.624999999999897e-02, -3.507788237343638e-01, 3.375000000000007e-01, 1.327882373436298e-02, 
              -3.507788237343638e-01, 3.375000000000007e-01, 1.327882373436298e-02, 1.796865294937447e+00, -1.601557647468720e+00, -1.953076474687268e-01, 
            -1.433897033204633e-01, 1.351829389220078e-01, -7.773558813281869e-02, -9.732510831794250e-01, 8.137527492653944e-01, 3.027355881328166e-01, 
              4.725304898203193e-01, -4.091186271093813e-01, -3.476441186718270e-02, -1.433897033204633e-01, 1.351829389220078e-01, -7.773558813281869e-02, 
            5.548919109961402e-01, -4.878991169297307e-01, 1.894955846486487e-02, 2.397699517148096e-01, -2.014246084921574e-01, -6.699279406640711e-02, 
              -2.137053773707065e+00, 1.852222842351596e+00, 1.415936771366819e-01, 5.548919109961402e-01, -4.878991169297307e-01, 1.894955846486487e-02, 
            2.358370127927936e-01, -2.592128458357795e-01, 5.878602966795382e-02, -3.048431231519189e+00, 2.971940103538750e+00, -4.443292652694986e-01, 
              2.358370127927936e-01, -2.592128458357795e-01, 5.878602966795382e-02, 8.517572059335762e-01, -8.035144118671687e-01, 1.017572059335898e-01, 
            6.655487754491650e-01, -6.029822559608766e-01, 5.878602966795382e-02, 7.085199517148011e-01, -6.889246084921485e-01, 1.017572059335898e-01, 
              6.655487754491650e-01, -6.029822559608766e-01, 5.878602966795382e-02, -3.764617502613122e+00, 3.544889120413895e+00, -4.443292652694986e-01, 
            -5.187083478507105e-02, -2.488920304761763e-03, 1.894955846486487e-02, -5.187083478507105e-02, -2.488920304761763e-03, 1.894955846486487e-02, 
              1.183234463636558e+00, -8.040077475233021e-01, 1.415936771366819e-01, -3.669927940664016e-01, 2.839855881328115e-01, -6.699279406640711e-02, 
            -3.204406864453031e-01, 2.768237254218797e-01, -7.773558813281869e-02, -3.204406864453031e-01, 2.768237254218797e-01, -7.773558813281869e-02, 
              -2.774695101796671e-01, 1.908813728906077e-01, -3.476441186718270e-02, 1.630850883070266e+00, -1.269528823734358e+00, 3.027355881328166e-01, 
            -1.395648534023173e+00, 1.122605298421627e+00, 2.730432356015455e-01, 3.262782656179167e+00, -3.188181773108895e+00, 4.816297068046353e-01, 
              -1.256590886554446e+00, 8.444900034841745e-01, -1.441297068046341e-01, 6.445676439845570e-02, -1.289135287969114e-01, 6.445676439845570e-02, 
            -5.156541151876457e-01, 5.156541151876456e-01, 0.000000000000000e+00, 8.053935357652566e-01, -4.577494170934404e-01, 2.085864712030898e-01, 
              -3.713980006968357e+00, 3.574922359499630e+00, -4.171729424061796e-01, -1.975759413609275e+00, 1.767172942406185e+00, 2.085864712030898e-01, 
            2.244927940664101e+00, -1.789855881328192e+00, 2.730432356015455e-01, 9.238802897111984e-01, -8.164523490471055e-01, 6.445676439845570e-02, 
              2.383985588132828e+00, -2.067971176265645e+00, -1.441297068046341e-01, 4.122206181491910e+00, -3.875720593359090e+00, 4.816297068046353e-01, 
            -3.671008830702719e+00, 3.488980006968355e+00, -5.460864712030911e-01, 9.874223594996203e-01, -8.218070645621673e-01, -3.375000000000012e-01, 
              -4.726829389220084e-01, 4.297117626563713e-01, -1.289135287969114e-01, -1.793730589874911e+00, 1.403115294937457e+00, -3.375000000000012e-01
        };
        const long nfa_exp = 20, dim_exp = 1*3;
        SETOP(GRAD, FEM_P3); 
    }
    {
        double U_exp[]={
            -0.000000000000000e+00, -0.000000000000000e+00, -3.000000000000000e+00, -0.000000000000000e+00, -0.000000000000000e+00, -3.000000000000000e+00, 
              -0.000000000000000e+00, -0.000000000000000e+00, -3.000000000000000e+00, -0.000000000000000e+00, -0.000000000000000e+00, -3.000000000000000e+00, 
            3.000000000000000e+00, 3.000000000000000e+00, 3.000000000000000e+00, 3.000000000000000e+00, 3.000000000000000e+00, 3.000000000000000e+00, 
              3.000000000000000e+00, 3.000000000000000e+00, 3.000000000000000e+00, 3.000000000000000e+00, 3.000000000000000e+00, 3.000000000000000e+00, 
            -3.000000000000000e+00, -0.000000000000000e+00, -0.000000000000000e+00, -3.000000000000000e+00, -0.000000000000000e+00, -0.000000000000000e+00, 
              -3.000000000000000e+00, -0.000000000000000e+00, -0.000000000000000e+00, -3.000000000000000e+00, -0.000000000000000e+00, -0.000000000000000e+00, 
            -0.000000000000000e+00, -3.000000000000000e+00, -0.000000000000000e+00, -0.000000000000000e+00, -3.000000000000000e+00, -0.000000000000000e+00, 
              -0.000000000000000e+00, -3.000000000000000e+00, -0.000000000000000e+00, -0.000000000000000e+00, -3.000000000000000e+00, -0.000000000000000e+00, 
            
            3.750000000000000e-01, -7.500000000000000e-01, 3.750000000000000e-01, 3.750000000000000e-01, -7.500000000000000e-01, 3.750000000000000e-01, 
              3.750000000000000e-01, -7.500000000000000e-01, 3.750000000000000e-01, 3.750000000000000e-01, -7.500000000000000e-01, 3.750000000000000e-01, 
            -3.000000000000000e+00, 3.000000000000000e+00, -0.000000000000000e+00, -3.000000000000000e+00, 3.000000000000000e+00, -0.000000000000000e+00, 
              -3.000000000000000e+00, 3.000000000000000e+00, -0.000000000000000e+00, -3.000000000000000e+00, 3.000000000000000e+00, -0.000000000000000e+00, 
            5.375000000000000e+00, -4.750000000000000e+00, 3.750000000000000e-01, 5.375000000000000e+00, -4.750000000000000e+00, 3.750000000000000e-01, 
              5.375000000000000e+00, -4.750000000000000e+00, 3.750000000000000e-01, 5.375000000000000e+00, -4.750000000000000e+00, 3.750000000000000e-01, 
            -2.750000000000000e+00, 2.500000000000000e+00, -7.500000000000000e-01, -2.750000000000000e+00, 2.500000000000000e+00, -7.500000000000000e-01, 
              -2.750000000000000e+00, 2.500000000000000e+00, -7.500000000000000e-01, -2.750000000000000e+00, 2.500000000000000e+00, -7.500000000000000e-01
        };
        const long nfa_exp = 4, dim_exp = 1*3;
        SETOP(GRAD, FEM_CR1);
    }
    {
        double U_exp[] = {
             1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 
             1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 
             1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 
             1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 
             1.732050807568877e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.732050807568877e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.732050807568877e+00, 
             1.732050807568877e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.732050807568877e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.732050807568877e+00, 
             1.732050807568877e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.732050807568877e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.732050807568877e+00, 
             1.732050807568877e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.732050807568877e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.732050807568877e+00, 
             1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 
             1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 
             1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 
             1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 
             1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 
             1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 
             1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 
             1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.000000000000000e+00, 
             3.061862178478973e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  3.061862178478970e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  3.061862178478973e-01, 
             3.061862178478973e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  3.061862178478970e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  3.061862178478973e-01, 
             3.061862178478973e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  3.061862178478970e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  3.061862178478973e-01, 
             3.061862178478973e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  3.061862178478970e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  3.061862178478973e-01, 
             1.414213562373095e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.414213562373094e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.414213562373095e+00, 
             1.414213562373095e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.414213562373094e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.414213562373095e+00, 
             1.414213562373095e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.414213562373094e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.414213562373095e+00, 
             1.414213562373095e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.414213562373094e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.414213562373095e+00, 
             2.394292983093107e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  2.394292983093107e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  2.394292983093107e+00, 
             2.394292983093107e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  2.394292983093107e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  2.394292983093107e+00, 
             2.394292983093107e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  2.394292983093107e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  2.394292983093107e+00, 
             2.394292983093107e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  2.394292983093107e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  2.394292983093107e+00, 
             1.263812574008592e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.263812574008591e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.263812574008592e+00, 
             1.263812574008592e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.263812574008591e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.263812574008592e+00, 
             1.263812574008592e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.263812574008591e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.263812574008592e+00, 
             1.263812574008592e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.263812574008591e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,  1.263812574008592e+00
        };
        int nfa_exp = 4, dim_exp = 3*3;
        SETOP(GRAD, FEM_RT0);
    }
    {
        double U_exp[] = {
            0.000000000000000e+00, -2.000000000000000e+00, -2.000000000000000e+00, 2.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 2.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,
            0.000000000000000e+00, -2.000000000000000e+00, -2.000000000000000e+00, 2.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 2.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -2.000000000000000e+00, -2.000000000000000e+00, 2.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 2.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -2.000000000000000e+00, -2.000000000000000e+00, 2.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 2.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00,
            0.000000000000000e+00, 2.000000000000000e+00, 0.000000000000000e+00, -2.000000000000000e+00, 0.000000000000000e+00, -2.000000000000000e+00, -0.000000000000000e+00, 2.000000000000000e+00, 0.000000000000000e+00,
            0.000000000000000e+00, 2.000000000000000e+00, 0.000000000000000e+00, -2.000000000000000e+00, 0.000000000000000e+00, -2.000000000000000e+00, -0.000000000000000e+00, 2.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, 2.000000000000000e+00, 0.000000000000000e+00, -2.000000000000000e+00, 0.000000000000000e+00, -2.000000000000000e+00, -0.000000000000000e+00, 2.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, 2.000000000000000e+00, 0.000000000000000e+00, -2.000000000000000e+00, 0.000000000000000e+00, -2.000000000000000e+00, -0.000000000000000e+00, 2.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -0.000000000000000e+00, 2.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.000000000000000e+00, -2.000000000000000e+00, -2.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -0.000000000000000e+00, 2.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.000000000000000e+00, -2.000000000000000e+00, -2.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -0.000000000000000e+00, 2.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.000000000000000e+00, -2.000000000000000e+00, -2.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -0.000000000000000e+00, 2.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.000000000000000e+00, -2.000000000000000e+00, -2.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -2.828427124746190e+00, 0.000000000000000e+00, 2.828427124746190e+00, 0.000000000000000e+00, -0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -2.828427124746190e+00, 0.000000000000000e+00, 2.828427124746190e+00, 0.000000000000000e+00, -0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -2.828427124746190e+00, 0.000000000000000e+00, 2.828427124746190e+00, 0.000000000000000e+00, -0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -2.828427124746190e+00, 0.000000000000000e+00, 2.828427124746190e+00, 0.000000000000000e+00, -0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -0.000000000000000e+00, -2.828427124746190e+00, 0.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 2.828427124746190e+00, 0.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -0.000000000000000e+00, -2.828427124746190e+00, 0.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 2.828427124746190e+00, 0.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -0.000000000000000e+00, -2.828427124746190e+00, 0.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 2.828427124746190e+00, 0.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -0.000000000000000e+00, -2.828427124746190e+00, 0.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 2.828427124746190e+00, 0.000000000000000e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.828427124746190e+00, -0.000000000000000e+00, 2.828427124746190e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.828427124746190e+00, -0.000000000000000e+00, 2.828427124746190e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.828427124746190e+00, -0.000000000000000e+00, 2.828427124746190e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.828427124746190e+00, -0.000000000000000e+00, 2.828427124746190e+00, 0.000000000000000e+00, 
            
            0.000000000000000e+00, 1.559023911155808e+00, 9.354143466934852e-01, -1.559023911155808e+00, 0.000000000000000e+00, -9.354143466934852e-01, -9.354143466934852e-01, 9.354143466934852e-01, 0.000000000000000e+00, 
            0.000000000000000e+00, 1.559023911155808e+00, 9.354143466934852e-01, -1.559023911155808e+00, 0.000000000000000e+00, -9.354143466934852e-01, -9.354143466934852e-01, 9.354143466934852e-01, 0.000000000000000e+00, 
            0.000000000000000e+00, 1.559023911155808e+00, 9.354143466934852e-01, -1.559023911155808e+00, 0.000000000000000e+00, -9.354143466934852e-01, -9.354143466934852e-01, 9.354143466934852e-01, 0.000000000000000e+00, 
            0.000000000000000e+00, 1.559023911155808e+00, 9.354143466934852e-01, -1.559023911155808e+00, 0.000000000000000e+00, -9.354143466934852e-01, -9.354143466934852e-01, 9.354143466934852e-01, 0.000000000000000e+00, 
            0.000000000000000e+00, -1.462494064565352e+00, -4.387482193696061e+00, 1.462494064565352e+00, 0.000000000000000e+00, 4.387482193696061e+00, 4.387482193696061e+00, -4.387482193696061e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -1.462494064565352e+00, -4.387482193696061e+00, 1.462494064565352e+00, 0.000000000000000e+00, 4.387482193696061e+00, 4.387482193696061e+00, -4.387482193696061e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -1.462494064565352e+00, -4.387482193696061e+00, 1.462494064565352e+00, 0.000000000000000e+00, 4.387482193696061e+00, 4.387482193696061e+00, -4.387482193696061e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -1.462494064565352e+00, -4.387482193696061e+00, 1.462494064565352e+00, 0.000000000000000e+00, 4.387482193696061e+00, 4.387482193696061e+00, -4.387482193696061e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -2.669269563007828e+00, 2.669269563007828e+00, 2.669269563007828e+00, 0.000000000000000e+00, -2.669269563007828e+00, -2.669269563007828e+00, 2.669269563007828e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -2.669269563007828e+00, 2.669269563007828e+00, 2.669269563007828e+00, 0.000000000000000e+00, -2.669269563007828e+00, -2.669269563007828e+00, 2.669269563007828e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -2.669269563007828e+00, 2.669269563007828e+00, 2.669269563007828e+00, 0.000000000000000e+00, -2.669269563007828e+00, -2.669269563007828e+00, 2.669269563007828e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -2.669269563007828e+00, 2.669269563007828e+00, 2.669269563007828e+00, 0.000000000000000e+00, -2.669269563007828e+00, -2.669269563007828e+00, 2.669269563007828e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -4.330127018922224e-01, 3.464101615137755e+00, 4.330127018922224e-01, 0.000000000000000e+00, -3.031088913245536e+00, -3.464101615137755e+00, 3.031088913245536e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -4.330127018922224e-01, 3.464101615137755e+00, 4.330127018922224e-01, 0.000000000000000e+00, -3.031088913245536e+00, -3.464101615137755e+00, 3.031088913245536e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -4.330127018922224e-01, 3.464101615137755e+00, 4.330127018922224e-01, 0.000000000000000e+00, -3.031088913245536e+00, -3.464101615137755e+00, 3.031088913245536e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -4.330127018922224e-01, 3.464101615137755e+00, 4.330127018922224e-01, 0.000000000000000e+00, -3.031088913245536e+00, -3.464101615137755e+00, 3.031088913245536e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, 4.358898943540674e+00, -3.632415786283895e+00, -4.358898943540674e+00, 0.000000000000000e+00, 2.905932629027116e+00, 3.632415786283895e+00, -2.905932629027116e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, 4.358898943540674e+00, -3.632415786283895e+00, -4.358898943540674e+00, 0.000000000000000e+00, 2.905932629027116e+00, 3.632415786283895e+00, -2.905932629027116e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, 4.358898943540674e+00, -3.632415786283895e+00, -4.358898943540674e+00, 0.000000000000000e+00, 2.905932629027116e+00, 3.632415786283895e+00, -2.905932629027116e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, 4.358898943540674e+00, -3.632415786283895e+00, -4.358898943540674e+00, 0.000000000000000e+00, 2.905932629027116e+00, 3.632415786283895e+00, -2.905932629027116e+00, 0.000000000000000e+00, 
            0.000000000000000e+00, -1.639359631075500e+00, 1.092906420717000e+00, 1.639359631075500e+00, 0.000000000000000e+00, -5.464532103585000e-01, -1.092906420717000e+00, 5.464532103585000e-01, 0.000000000000000e+00, 
            0.000000000000000e+00, -1.639359631075500e+00, 1.092906420717000e+00, 1.639359631075500e+00, 0.000000000000000e+00, -5.464532103585000e-01, -1.092906420717000e+00, 5.464532103585000e-01, 0.000000000000000e+00, 
            0.000000000000000e+00, -1.639359631075500e+00, 1.092906420717000e+00, 1.639359631075500e+00, 0.000000000000000e+00, -5.464532103585000e-01, -1.092906420717000e+00, 5.464532103585000e-01, 0.000000000000000e+00, 
            0.000000000000000e+00, -1.639359631075500e+00, 1.092906420717000e+00, 1.639359631075500e+00, 0.000000000000000e+00, -5.464532103585000e-01, -1.092906420717000e+00, 5.464532103585000e-01, 0.000000000000000e+00
        };
        const long nfa_exp = 6, dim_exp = 3*3;
        std::for_each(U_exp, U_exp+nfa_exp*dim_exp*q*fusion, [](double& x) { x /= 2; });
        SETOP(GRAD, FEM_ND0);
    }
    {
      const long nfa_exp = 1, dim_exp = 3;
      double U_exp[dim_exp*q * nfa_exp*fusion] = {
          2.186501033599203e+00, 2.186501033599203e+00, 2.186501033599203e+00, -2.186501033599203e+00, 0.000000000000000e+00, 0.000000000000000e+00, 
          0.000000000000000e+00, -2.186501033599203e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.186501033599203e+00, 
          
          -2.186501033599203e+00, 2.186501033599203e+00, 0.000000000000000e+00, 3.917481018531906e+00, -3.461959969865405e+00, 2.733126291999004e-01, 
          -2.004292614132603e+00, 1.822084194666003e+00, -5.466252583998008e-01, 2.733126291999004e-01, -5.466252583998008e-01, 2.733126291999004e-01
      };
      SETOP(GRAD, FEM_B4);
    }
    #undef SETOP 
    #define SET_DUDX(OP, FEM_TYPE, NCRD) {\
        const long nfa_exp = Operator<OP, FemFix<FEM_TYPE>>::Nfa::value, dim_exp = Operator<OP, FemFix<FEM_TYPE>>::Dim::value;\
        const int K = NCRD;\
        Operator<OP, FemFix<FEM_TYPE>> op1;\
        Operator<GRAD, FemFix<FEM_TYPE>> op2;\
        std::size_t Usz, Vsz, extraRsz, extraIsz;\
        op1.memoryRequirements<double, long>(fusion, q, Usz, extraRsz, extraIsz);\
        {\
            std::size_t extraRsz2, extraIsz2;\
            op2.memoryRequirements<double, long>(fusion, q, Vsz, extraRsz2, extraIsz2);\
            extraRsz = std::max(extraRsz, extraRsz2), extraIsz = std::max(extraIsz, extraIsz2);\
        }\
        Ud.resize(Usz+Vsz), extraR.resize(extraRsz), extraI.resize(extraIsz);\
        mem.U.Init(Ud.data(), Usz), mem.extraR.Init(extraR.data(), extraRsz), mem.extraI.Init(extraI.data(), extraIsz);\
        mem.V.Init(Ud.data() + Usz, Vsz);\
        DenseMatrix<double> U_e = op1.apply(mem, mem.U);\
        DenseMatrix<double> U_g = op2.apply(mem, mem.V);\
        for (int r = 0; r < fusion; ++r)\
        for (int i = 0; i < nfa_exp; ++i)\
        for (int n = 0; n < q; ++n)\
        for (int k = 0; k < dim_exp; ++k)\
            U_g.data[k + dim_exp*n + dim_exp*q*(i + nfa_exp*r)] = U_g(K + 3*k + 3*dim_exp*n, i + nfa_exp*r);\
        U_g.Init(U_g.data, U_g.nRow/3, U_g.nCol, U_g.size);    \
        std::string error_msg = std::string("Operator ") + #OP +"("+ #FEM_TYPE + ")" + " failure";\
        EXPECT_NEAR(U_e.ScalNorm(1, U_e, -1, U_g), 0, 100*(1 + U_g.ScalNorm(1, U_g))*DBL_EPSILON) << error_msg;\
    }
    #define SET_DUDX_FULL(FEM_TYPE) \
        SET_DUDX(DUDX, FEM_TYPE, 0);\
        SET_DUDX(DUDY, FEM_TYPE, 1);\
        SET_DUDX(DUDZ, FEM_TYPE, 2);
    SET_DUDX_FULL(FEM_P0);
    SET_DUDX_FULL(FEM_P1);
    SET_DUDX_FULL(FEM_P2);
    SET_DUDX_FULL(FEM_P3);
    SET_DUDX_FULL(FEM_B4);
    SET_DUDX_FULL(FEM_RT0);
    SET_DUDX_FULL(FEM_CR1);
    SET_DUDX_FULL(FEM_ND0);
    #undef SET_DUDX_FULL
    #undef SET_DUDX

    #define SET_CURL(FEM_TYPE) {\
        const long nfa_exp = Operator<CURL, FemFix<FEM_TYPE>>::Nfa::value, dim_exp = Operator<CURL, FemFix<FEM_TYPE>>::Dim::value;\
        Operator<CURL, FemFix<FEM_TYPE>> op1;\
        Operator<GRAD, FemFix<FEM_TYPE>> op2;\
        std::size_t Usz, Vsz, extraRsz, extraIsz;\
        op1.memoryRequirements<double, long>(fusion, q, Usz, extraRsz, extraIsz);\
        {\
            std::size_t extraRsz2, extraIsz2;\
            op2.memoryRequirements<double, long>(fusion, q, Vsz, extraRsz2, extraIsz2);\
            extraRsz = std::max(extraRsz, extraRsz2), extraIsz = std::max(extraIsz, extraIsz2);\
        }\
        Ud.resize(2*Usz+Vsz), extraR.resize(extraRsz), extraI.resize(extraIsz);\
        mem.U.Init(Ud.data(), Usz), mem.extraR.Init(extraR.data(), extraRsz), mem.extraI.Init(extraI.data(), extraIsz);\
        mem.V.Init(Ud.data() + Usz, Vsz);\
        DenseMatrix<double> U_e = op1.apply(mem, mem.U);\
        DenseMatrix<double> U_g = op2.apply(mem, mem.V);\
        DenseMatrix<double> U_a(Ud.data() + Usz+Vsz, dim_exp*q, nfa_exp*fusion);\
        for (int r = 0; r < fusion; ++r)\
        for (int i = 0; i < nfa_exp; ++i)\
        for (int n = 0; n < q; ++n)\
        for (int k = 0; k < dim_exp; ++k)\
            U_a(k+dim_exp*n, i + nfa_exp*r) = U_g(((k+1)%3) + 3*((k+2)%3) + 3*dim_exp*n, i + nfa_exp*r) - U_g(((k+2)%3) + 3*((k+1)%3) + 3*dim_exp*n, i + nfa_exp*r);\
        std::string error_msg = std::string("Operator ") + "CURL" +"("+ #FEM_TYPE + ")" + " failure";\
        EXPECT_NEAR(U_e.ScalNorm(1, U_e, -1, U_a), 0, 100*(1 + U_a.ScalNorm(1, U_a))*DBL_EPSILON) << error_msg;\
    }
    SET_CURL(FEM_RT0);
    SET_CURL(FEM_ND0);
    #undef SET_CURL 

    #define SET_DIV(FEM_TYPE) {\
        const long nfa_exp = Operator<DIV, FemFix<FEM_TYPE>>::Nfa::value, dim_exp = Operator<DIV, FemFix<FEM_TYPE>>::Dim::value;\
        Operator<DIV, FemFix<FEM_TYPE>> op1;\
        Operator<GRAD, FemFix<FEM_TYPE>> op2;\
        std::size_t Usz, Vsz, extraRsz, extraIsz;\
        op1.memoryRequirements<double, long>(fusion, q, Usz, extraRsz, extraIsz);\
        {\
            std::size_t extraRsz2, extraIsz2;\
            op2.memoryRequirements<double, long>(fusion, q, Vsz, extraRsz2, extraIsz2);\
            extraRsz = std::max(extraRsz, extraRsz2), extraIsz = std::max(extraIsz, extraIsz2);\
        }\
        Ud.resize(2*Usz+Vsz), extraR.resize(extraRsz), extraI.resize(extraIsz);\
        mem.U.Init(Ud.data(), Usz), mem.extraR.Init(extraR.data(), extraRsz), mem.extraI.Init(extraI.data(), extraIsz);\
        mem.V.Init(Ud.data() + Usz, Vsz);\
        DenseMatrix<double> U_e = op1.apply(mem, mem.U);\
        DenseMatrix<double> U_g = op2.apply(mem, mem.V);\
        DenseMatrix<double> U_a(Ud.data() + Usz+Vsz, dim_exp*q, nfa_exp*fusion);\
        for (int r = 0; r < fusion; ++r)\
        for (int i = 0; i < nfa_exp; ++i)\
        for (int n = 0; n < q; ++n)\
            U_a(n, i + nfa_exp*r) = U_g(0 + 9*n, i + nfa_exp*r) + U_g(4 + 9*n, i + nfa_exp*r) + U_g(8 + 9*n, i + nfa_exp*r);\
        std::string error_msg = std::string("Operator ") + "DIV" +"("+ #FEM_TYPE + ")" + " failure";\
        EXPECT_NEAR(U_e.ScalNorm(1, U_e, -1, U_a), 0, 100*(1 + U_a.ScalNorm(1, U_a))*DBL_EPSILON) << error_msg;\
    } 
    SET_DIV(FEM_RT0);
    SET_DIV(FEM_ND0);
    #undef SET_DIV
}

#ifdef WITH_EIGEN
TEST(AniInterface, TemplatedFemSpacesByImplementationApplyTest) {
    using namespace Ani;
    using namespace Eigen;
    const unsigned char _IPF[] = {0, 1, 2, 3, 1, 2, 3, 0, 0, 2, 3, 1, 0, 1, 3, 2},
            _IPR[] = {0, 1, 2, 3, 0, 2, 3, 1, 0, 3, 1, 2, 1, 2, 0, 3, 1, 3, 2, 0, 2, 3, 0, 1};
    Map<const Matrix<unsigned char, 4, 4>> IPF(_IPF);
    Map<const Matrix<unsigned char, 4, 6>> IPR(_IPR);
    const Matrix<double, 3, 4> GRAD_P1{{-1, 1, 0, 0},
                                       {-1, 0, 1, 0},
                                       {-1, 0, 0, 1}};
//    FiniteElement fem_types[] = {FEM_P0, FEM_P1, FEM_P2, FEM_P3, FEM_CR1, FEM_RT0, FEM_ND0};
    auto formula = tetrahedron_quadrature_formulas(2);
    auto XYL = formula.BaryView();
    Matrix3Xd XY1{{1, 0},
                  {1, 0},
                  {1, 0}},
            XY2{{2, 2},
                {1, 1},
                {1, 1}},
            XY3{{1, 1},
                {2, 2},
                {1, 1}},
            XY4{{1, 2},
                {1, 1},
                {2, 2}};
    int fusion_param = XY1.cols();
    Eigen::Matrix3Xd XYP;
    XYP.resize(3, fusion_param * 4);
    Matrix3Xd PSI;
    PSI.resize(3, fusion_param * 3);
    RowVectorXd cdet;
    cdet.resize(1, fusion_param);
    for (int r = 0; r < fusion_param; ++r) {
        auto lXYP = XYP.block<3, 4>(0, 4 * r);
        lXYP.col(0) = XY1.col(r) - XY1.col(r);
        lXYP.col(1) = XY2.col(r) - XY1.col(r);
        lXYP.col(2) = XY3.col(r) - XY1.col(r);
        lXYP.col(3) = XY4.col(r) - XY1.col(r);
        PSI.block<3, 3>(0, 3 * r) = lXYP.block<3, 3>(0, 1).inverse();
        cdet(0, r) = lXYP.block<3, 3>(0, 1).determinant();
    }

//    int nfa, dim;
    Eigen::MatrixXd U;
    auto q = XYL.cols();
    long f = fusion_param;
    auto reindexed = [q, f](Eigen::MatrixXd &U, int nfa, int dim) {
        Eigen::MatrixXd res(q * dim, f * nfa);
        for (int k = 0; k < dim; ++k)
            for (int n = 0; n < q; ++n)
                for (int i = 0; i < nfa; ++i)
                    for (int r = 0; r < f; ++r)
                        res(k + dim * n, i + nfa * r) = U(i + nfa * k, n + q * r);
        return res;
    };
    AniMemory<double, int> mem;
    std::vector<double> Ud;
    std::vector<double> extraR;
    std::vector<double> XYPd(3*4*f);
    std::vector<double> PSId(3*3*f);
    std::vector<double> DETd(f), MESd(f);
    Map<MatrixXd> XYPm(XYPd.data(), 3, 4*f);
    XYPm = XYP;
    Map<MatrixXd> PSIm(PSId.data(), 3, 3*f);
    PSIm = PSI;
    Map<MatrixXd> DETm(DETd.data(), 1, f);
    DETm = cdet;
    Map<MatrixXd> MESm(MESd.data(), 1, f);
    MESm = cdet.cwiseAbs() / 6;
    mem.XYP.Init(XYPd.data(), XYPd.size());
    mem.PSI.Init(PSId.data(), PSId.size());
    mem.DET.Init(DETd.data(), DETd.size());
    mem.MES.Init(MESd.data(), MESd.size());
    mem.XYL.Init(const_cast<double*>(formula.p), 4*q);
    mem.WG.Init(const_cast<double*>(formula.w), q);
    mem.q = XYL.cols();
    mem.f = f;
    std::vector<int> extraI;
#define SETOP(OP, FEM_TYPE) \
    Operator<OP, FemFix<FEM_TYPE>> op1;\
    std::size_t Usz, extraRsz, extraIsz;\
    op1.memoryRequirements<double, int>(f, q, Usz, extraRsz, extraIsz);\
    Ud.resize(Usz); mem.U.Init(Ud.data(), Ud.size());\
    extraR.resize(extraRsz); mem.extraR.Init(extraR.data(), extraR.size());\
    extraI.resize(extraIsz); mem.extraI.Init(extraI.data(), extraI.size());\
    auto Ur = op1.apply(mem, mem.U);\
    auto realU = Map<MatrixXd>(Ur.data, Ur.nRow, Ur.nCol);                  \
    std::string error_msg = std::string("Operator ") + #OP +"("+ #FEM_TYPE + ")" + " failure"

    {
        SETOP(IDEN, FEM_P0);

        int nfa_exp = 1, dim_exp = 1;
        Eigen::MatrixXd U_exp; U_exp.resize(dim_exp*nfa_exp, f*q);
        for (int r = 0; r < f; ++r) {
            auto lU_exp = U_exp.block(0, q*r, U_exp.rows(), q);
            lU_exp.array() = 1;
        }
        auto expU = reindexed(U_exp, nfa_exp, dim_exp);
        EXPECT_NEAR((realU - expU).norm(), 0, 10*DBL_EPSILON) << error_msg;
    }
    {
        SETOP(IDEN, FEM_P1);
        int nfa_exp = 4, dim_exp = 1;
        Eigen::MatrixXd U_exp; U_exp.resize(dim_exp*nfa_exp, f*q);
        for (int r = 0; r < f; ++r) {
            auto lU_exp = U_exp.block(0, q*r, U_exp.rows(), q);
            for (int i = 0; i < nfa_exp; ++i)
                for (int n = 0; n < q; ++n)
                    lU_exp(i, n) = XYL(i,n);
        }
        auto expU = reindexed(U_exp, nfa_exp, dim_exp);
        EXPECT_NEAR((realU - expU).norm(), 0, 10*DBL_EPSILON) << error_msg;
    }
    {
        SETOP(IDEN, FEM_P2);
        int nfa_exp = 10, dim_exp = 1;
        Eigen::MatrixXd U_exp; U_exp.resize(dim_exp*nfa_exp, f*q);
        for (int r = 0; r < f; ++r) {
            auto lU_exp = U_exp.block(0, q*r, U_exp.rows(), q);
            for (int n = 0; n < q; ++n){
                for (int i = 0; i < 4; ++i) {
                    auto s = XYL(i, n);
                    lU_exp(i, n) = s * (2*s - 1);
                }
                int mfa = 4;
                for (int i = 0; i < 3; ++i) {
                    for (int j = i+1; j < 4; ++j)
                        lU_exp(mfa++, n) = 4 * XYL(i, n) * XYL(j, n);
                }
            }
        }
        auto expU = reindexed(U_exp, nfa_exp, dim_exp);
        EXPECT_NEAR((realU - expU).norm(), 0, 10*DBL_EPSILON) << error_msg;
    }
    {
        SETOP(IDEN, FEM_P3);
        int nfa_exp = 20, dim_exp = 1;
        Eigen::MatrixXd U_exp; U_exp.resize(dim_exp*nfa_exp, f*q);
        for (int r = 0; r < f; ++r) {
            auto lU_exp = U_exp.block(0, q*r, U_exp.rows(), q);
            for (int n = 0; n < q; ++n){
                for (int i = 0; i < 4; ++i) {
                    auto s1 = XYL(i, n);
                    lU_exp(i, n) = s1 * (3*s1 - 1) * (3*s1 - 2) / 2;
                }
                int mfa = 4;
                for (int i = 0; i < 3; ++i) {
                    for (int j = i+1; j < 4; ++j) {
                        auto s1 = XYL(i, n);
                        auto s2 = XYL(j, n);
                        lU_exp(4 + (mfa-4)*2, n) = s1 * (3*s1 - 1) * s2 * 4.5;
                        lU_exp(4 + (mfa-4)*2 + 1, n) = s1 * (3*s2 - 1) * s2 * 4.5;
                        mfa++;
                    }
                }
                mfa = 16;
                for (int i = 0; i < 4; ++i){
                    auto ip1 = IPF(0, i);
                    auto ip2 = IPF(1, i);
                    auto ip3 = IPF(2, i);

                    auto s1 = XYL(ip1, n);
                    auto s2 = XYL(ip2, n);
                    auto s3 = XYL(ip3, n);
                    lU_exp(mfa++, n) = 27 * s1 * s2 * s3;
                }
            }
        }
        auto expU = reindexed(U_exp, nfa_exp, dim_exp);
        EXPECT_NEAR((realU - expU).norm(), 0, 10*DBL_EPSILON) << error_msg;
    }
    {
        SETOP(IDEN, FEM_CR1);
        int nfa_exp = 4, dim_exp = 1;
        Eigen::MatrixXd U_exp; U_exp.resize(dim_exp*nfa_exp, f*q);
        for (int r = 0; r < f; ++r) {
            auto lU_exp = U_exp.block(0, q * r, U_exp.rows(), q);
            for (int n = 0; n < q; ++n) {
                for (int i = 0; i < nfa_exp; ++i) {
                    auto l = IPF(3, i);
                    lU_exp(i, n) = 1 - 3 * XYL(l, n);
                }
            }
        }
        auto expU = reindexed(U_exp, nfa_exp, dim_exp);
        EXPECT_NEAR((realU - expU).norm(), 0, 10*DBL_EPSILON) << error_msg;
    }
    {
        SETOP(IDEN, FEM_RT0);
        int nfa_exp = 4, dim_exp = 3;
        Eigen::MatrixXd U_exp; U_exp.resize(dim_exp*nfa_exp, f*q);
        for (int r = 0; r < f; ++r) {
            auto lU_exp = U_exp.block(0, q * r, U_exp.rows(), q);
            auto lXYP = XYP.block<3,4>(0, r*4);
            auto vol = abs(cdet(0, r))/2;
            for (int i = 0; i < nfa_exp; ++i) {
                auto ip1 = IPF(0, i),
                        ip2 = IPF(1, i),
                        ip3 = IPF(2, i),
                        ip4 = IPF(3, i);
                auto sqr = (lXYP.col(ip1) - lXYP.col(ip3)).cross(lXYP.col(ip2) - lXYP.col(ip3)).norm()/2;
                sqr = sqr / vol;
                for (int n = 0; n < q; ++n) {
                    for (int k = 0; k < dim_exp; ++k) {
                        lU_exp(i+k*nfa_exp, n) = sqr*(XYL(ip1, n) * (lXYP(k, ip1) - lXYP(k, ip4))
                                                      + XYL(ip2, n) * (lXYP(k, ip2) - lXYP(k, ip4))
                                                      + XYL(ip3, n) * (lXYP(k, ip3) - lXYP(k, ip4)));

                    }
                }
            }
        }
        auto expU = reindexed(U_exp, nfa_exp, dim_exp);
        EXPECT_NEAR((realU - expU).norm(), 0, 10*DBL_EPSILON) << error_msg;
    }
    {
        SETOP(IDEN, FEM_ND0);
        int nfa_exp = 6, dim_exp = 3;
        Eigen::MatrixXd U_exp; U_exp.resize(dim_exp*nfa_exp, f*q);
        for (int r = 0; r < f; ++r) {
            auto lU_exp = U_exp.block(0, q * r, U_exp.rows(), q);
            auto lXYP = XYP.block<3, 4>(0, r * 4);
            auto vol = cdet(0, r);
            for (int i = 0; i < nfa_exp; ++i) {
                auto ip1 = IPR(0, i),
                        ip2 = IPR(1, i),
                        ip3 = IPR(2, i),
                        ip4 = IPR(3, i);
                Vector3d xyn = (lXYP.col(ip3) - lXYP.col(ip1)).cross(lXYP.col(ip4) - lXYP.col(ip1));
                Vector3d xym = (lXYP.col(ip3) - lXYP.col(ip2)).cross(lXYP.col(ip4) - lXYP.col(ip2));
                auto sqr = (lXYP.col(ip2) - lXYP.col(ip1)).norm() / vol;
                for (int n = 0; n < q; ++n)
                    for (int k = 0; k < dim_exp; ++k)
                        lU_exp(i + k*nfa_exp, n) = sqr * (XYL(ip1, n) * xyn(k) + XYL(ip2, n) * xym(k));
            }
        }
        auto expU = reindexed(U_exp, nfa_exp, dim_exp);
        EXPECT_NEAR((realU - expU).norm(), 0, 10*DBL_EPSILON) << error_msg;
    }
    {
        SETOP(GRAD, FEM_P0);
        int nfa_exp = 1, dim_exp = 3;
        Eigen::MatrixXd U_exp; U_exp.resize(dim_exp*nfa_exp, f*q);
        for (int r = 0; r < f; ++r) {
            auto lU_exp = U_exp.block(0, q*r, U_exp.rows(), q);
            lU_exp.array() = 0;
        }

        auto expU = reindexed(U_exp, nfa_exp, dim_exp);
        EXPECT_NEAR((realU - expU).norm(), 0, 10*DBL_EPSILON) << error_msg;
    }
    {
        SETOP(GRAD, FEM_P1);
        int nfa_exp = 4, dim_exp = 3;
        Eigen::MatrixXd U_exp; U_exp.resize(dim_exp*nfa_exp, f*q);
        for (int r = 0; r < f; ++r) {
            auto lU_exp = U_exp.block(0, q*r, U_exp.rows(), q);
            auto lPSI = PSI.block<3,3>(0, 3*r);
            lU_exp.setZero();
            for (int i = 0; i < nfa_exp; ++i)
                for (int k = 0; k < dim_exp; ++k)
                    for (int j = 0; j < 3; ++j)
                        lU_exp(i+k*nfa_exp, 0) += lPSI(j, k) * GRAD_P1(j, i);
            lU_exp.block(0, 1, lU_exp.rows(), lU_exp.cols()-1).colwise() = lU_exp.col(0);
        }

        auto expU = reindexed(U_exp, nfa_exp, dim_exp);
        EXPECT_NEAR((realU - expU).norm(), 0, 10*DBL_EPSILON) << error_msg;
    }
    {
        SETOP(GRAD, FEM_P2);
        int nfa_exp = 10, dim_exp = 3;
        Eigen::MatrixXd U_exp; U_exp.resize(dim_exp*nfa_exp, f*q);
        for (int r = 0; r < f; ++r) {
            auto lU_exp = U_exp.block(0, q * r, U_exp.rows(), q);
            lU_exp.setZero();
            auto lPSI = PSI.block<3, 3>(0, 3 * r);
            Eigen::MatrixXd GRAD_P2; GRAD_P2.resize(dim_exp*nfa_exp, q);
            for (int n = 0; n < q; ++n) {
                for (int i = 0; i < 4; ++i)
                    for (int k = 0; k < dim_exp; ++k)
                        GRAD_P2(i + k*nfa_exp, n) = GRAD_P1(k, i) * (4*XYL(i, n) - 1);
                int mfa = 4;
                for (int i = 0; i < 3; ++i)
                    for (int j = i+1; j < 4; ++j, ++mfa)
                        for (int k = 0; k < dim_exp; ++k)
                            GRAD_P2(mfa + k * nfa_exp, n) = 4 * (XYL(i, n) * GRAD_P1(k, j) + XYL(j, n) * GRAD_P1(k, i));
            }
            for (int n = 0; n < q; ++n) {
                for (int i = 0; i < nfa_exp; ++i)
                    for (int k = 0; k < dim_exp; ++k)
                        for (int j = 0; j < 3; ++j)
                            lU_exp(i + nfa_exp*k, n) += lPSI(j, k)*GRAD_P2(i + j*nfa_exp, n);
            }
        }

        auto expU = reindexed(U_exp, nfa_exp, dim_exp);
        EXPECT_NEAR((realU - expU).norm(), 0, 10*DBL_EPSILON) << error_msg;
    }
    {
        SETOP(GRAD, FEM_P3);
        int nfa_exp = 20, dim_exp = 3;
        Eigen::MatrixXd U_exp; U_exp.resize(dim_exp*nfa_exp, f*q);
        for (int r = 0; r < f; ++r) {
            auto lU_exp = U_exp.block(0, q * r, U_exp.rows(), q);
            lU_exp.setZero();
            auto lPSI = PSI.block<3, 3>(0, 3 * r);
            Eigen::MatrixXd GRAD_P3; GRAD_P3.resize(dim_exp * nfa_exp, q);
            for (int n = 0; n < q; ++n) {
                for (int i = 0; i < 4; ++i)
                    for (int k = 0; k < dim_exp; ++k)
                        GRAD_P3(i + k*nfa_exp, n) = GRAD_P1(k, i) * ((13.5*XYL(i, n) - 9) * XYL(i, n) + 1);
                int mfa = 4;
                for (int i = 0; i < 3; ++i)
                    for (int j = i+1; j < 4; ++j, ++mfa) {
                        auto s1 = XYL(i, n), s2 = XYL(j, n);
                        for (int k = 0; k < dim_exp; ++k){
                            GRAD_P3(4 + 2*(mfa-4) + k * nfa_exp, n) = (GRAD_P1(k, i) * (6 * s1 - 1) * s2 + GRAD_P1(k, j) * (3 * s1 - 1) * s1) * 4.5;
                            GRAD_P3(4 + 2*(mfa-4) + 1 + k * nfa_exp, n) = (GRAD_P1(k, j) * (6 * s2 - 1) * s1 + GRAD_P1(k, i) * (3 * s2 - 1) * s2) * 4.5;
                        }
                    }
                mfa = 16;
                for (int i = 0; i < 4; ++i, ++mfa){
                    auto ip1 = IPF(0, i);
                    auto ip2 = IPF(1, i);
                    auto ip3 = IPF(2, i);
                    auto s1 = XYL(ip1, n), s2 = XYL(ip2, n), s3 = XYL(ip3, n);
                    for (int k = 0; k < dim_exp; ++k){
                        GRAD_P3(mfa + k * nfa_exp, n) = 27 * (GRAD_P1(k, ip1) * s2 * s3 + GRAD_P1(k, ip2) * s1 * s3 + GRAD_P1(k, ip3) * s1 * s2);
                    }
                }
            }
            for (int n = 0; n < q; ++n)
                for (int i = 0; i < nfa_exp; ++i)
                    for (int k = 0; k < dim_exp; ++k)
                        for (int j = 0; j < 3; ++j)
                            lU_exp(i + nfa_exp*k, n) += lPSI(j, k) * GRAD_P3(i + j*nfa_exp, n);
        }
        auto expU = reindexed(U_exp, nfa_exp, dim_exp);
        EXPECT_NEAR((realU - expU).norm(), 0, 10*DBL_EPSILON) << error_msg;
    }
    {
        SETOP(GRAD, FEM_CR1);
        int nfa_exp = 4, dim_exp = 3;
        Eigen::MatrixXd U_exp; U_exp.resize(dim_exp*nfa_exp, f*q);
        for (int r = 0; r < f; ++r) {
            auto lU_exp = U_exp.block(0, q * r, U_exp.rows(), q);
            lU_exp.setZero();
            auto lPSI = PSI.block<3, 3>(0, 3 * r);
            for (int i = 0; i < nfa_exp; ++i)
                for (int k = 0; k < dim_exp; ++k)
                    for (int j = 0; j < 3; ++j)
                        lU_exp(i + k * nfa_exp, 0) += -3*lPSI(j, k) * GRAD_P1(j, IPF(3, i));
            lU_exp.block(0, 1, lU_exp.rows(), lU_exp.cols()-1).colwise() = lU_exp.col(0);
        }
        auto expU = reindexed(U_exp, nfa_exp, dim_exp);
        EXPECT_NEAR((realU - expU).norm(), 0, 10*DBL_EPSILON) << error_msg;
    }
    {
        SETOP(GRAD, FEM_RT0);
        int nfa_exp = 4, dim_exp = 9;
        Eigen::MatrixXd U_exp; U_exp.resize(dim_exp*nfa_exp, f*q);
        for (int r = 0; r < f; ++r) {
            auto lU_exp = U_exp.block(0, q * r, U_exp.rows(), q);
            lU_exp.setZero();
            auto lPSI = PSI.block<3, 3>(0, 3 * r);
            auto lXYP = XYP.block<3, 4>(0, r * 4);
            auto vol = std::fabs(cdet(0, r)) / 2;

            Eigen::MatrixXd V; V.resize(4*3, q);
            V.setZero();
            for (int i = 0; i < 4; ++i)
                for (int k = 0; k < 3; ++k)
                    for (int j = 0; j < 3; ++j)
                        V(i+k*4, 0) += lPSI(j, k) * GRAD_P1(j, i);
            V.block(0, 1, V.rows(), V.cols()-1).colwise() = V.col(0);


            for (int i = 0; i < nfa_exp; ++i){
                auto ip1 = IPF(0, i);
                auto ip2 = IPF(1, i);
                auto ip3 = IPF(2, i);
                auto ip4 = IPF(3, i);
                auto sqr = (lXYP.col(ip1) - lXYP.col(ip3)).cross(lXYP.col(ip2) - lXYP.col(ip3)).norm()/2;
                sqr /= vol;
                int l = 0;
                for (int j = 0; j < 3; ++j)
                    for (int k = 0; k < 3; ++k, ++l){
                        lU_exp(i + l*nfa_exp, 0) = sqr * (V(k * 4 + ip1, 0) * (lXYP(j, ip1) - lXYP(j, ip4))
                                                          + V(k*4+ip2, 0) * (lXYP(j, ip2) - lXYP(j, ip4))
                                                          + V(k*4 + ip3, 1) * (lXYP(j, ip3) - lXYP(j, ip4)));
                    }
            }
            lU_exp.block(0, 1, lU_exp.rows(), lU_exp.cols()-1).colwise() = lU_exp.col(0);
        }
        auto expU = reindexed(U_exp, nfa_exp, dim_exp);
        EXPECT_NEAR((realU - expU).norm(), 0, 10*DBL_EPSILON) << error_msg;
    }
#undef SETOP
}
#endif